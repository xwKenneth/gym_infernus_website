DROP DATABASE IF EXISTS gyminfernus_db;
CREATE DATABASE gyminfernus_db;
USE gyminfernus_db;
CREATE TABLE cargo (
    cargo_id INT PRIMARY KEY,
    cargo VARCHAR(100) NOT NULL
);

CREATE TABLE empleado (
    empleado_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    nombre_empleado VARCHAR(100) NOT NULL,
    apellido_empleado VARCHAR(100) NOT NULL,
    correo_empleado VARCHAR(100) UNIQUE NOT NULL,
    clave_empleado VARCHAR(255) NOT NULL,
    cargo_id INT,
    CONSTRAINT fk_cargo_empleado FOREIGN KEY (cargo_id) REFERENCES cargo(cargo_id)
);
SELECT cliente_id, correo_cliente, clave_cliente, estado_cliente
                FROM cliente
                WHERE correo_cliente = 1
CREATE TABLE cliente (
    cliente_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    nombre_cliente VARCHAR(100) NOT NULL,
    apellido_cliente VARCHAR(100) NOT NULL,
    telefono_cliente VARCHAR(15) NOT NULL,
    dui_cliente VARCHAR(10) UNIQUE NOT NULL,
    nacimiento_cliente DATE NOT NULL CHECK(),
    correo_cliente VARCHAR(100) UNIQUE NOT NULL,
    direccion_cliente VARCHAR(255) NOT NULL,
    clave_cliente VARCHAR(255) NOT NULL,
  	 estado_cliente tinyint(1) NOT NULL DEFAULT 1
);
SELECT cliente_id, correo_cliente, clave_cliente, estado_cliente
                FROM cliente
                WHERE correo_cliente = 1
/*ALTER TABLE cliente ADD estado_cliente tinyint(1) NOT NULL DEFAULT 1; */
 
CREATE TABLE proveedor (
    proveedor_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    nombre_proveedor VARCHAR(100) UNIQUE NOT NULL,
    telefono_proveedor VARCHAR(15) NOT NULL,
    direccion_proveedor VARCHAR(255) NOT NULL
);
 

CREATE TABLE marca(
    marca_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    nombre_marca VARCHAR(100) UNIQUE NOT NULL,
    imagen_marca VARCHAR(255) NOT NULL
);
SELECT * FROM categoria
CREATE TABLE categoria (
    categoria_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    nombre_categoria VARCHAR(100) UNIQUE NOT NULL,
    descuento_categoria DECIMAL(5, 2) DEFAULT 0 CHECK (descuento_categoria >= 0 AND descuento_categoria <= 100),
    imagen_categoria VARCHAR(255) NOT NULL
);
SELECT producto_id, imagen_producto, nombre_producto, descripcion_producto, precio_producto, existencias_producto
                FROM producto
                INNER JOIN categoria USING(categoria_id)
                WHERE categoria_id = 37 AND estado_producto = true
                ORDER BY nombre_producto
 
CREATE TABLE producto (
    producto_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    nombre_producto VARCHAR(100) UNIQUE NOT NULL,
    descripcion_producto TEXT,
    precio_producto DECIMAL(10, 2) NOT NULL,
    descuento_producto DECIMAL(5, 2) DEFAULT 0 CHECK (descuento_producto >= 0 AND descuento_producto <= 100),
    imagen_producto VARCHAR(255) NOT NULL,
    existencias_producto INT NOT NULL,
    proveedor_id INT,
    marca_id INT,
    categoria_id INT,
    estado_producto TINYINT(1) NOT NULL,
    fecha_registro date NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    CONSTRAINT fk_proveedor_producto FOREIGN KEY (proveedor_id) REFERENCES proveedor(proveedor_id),
    CONSTRAINT fk_marca_producto FOREIGN KEY (marca_id) REFERENCES marca(marca_id),
    CONSTRAINT fk_categoria_producto FOREIGN KEY (categoria_id) REFERENCES categoria(categoria_id),
    CONSTRAINT chk_precio_positive CHECK (precio_producto >= 0),
    CONSTRAINT chk_existencias_positive CHECK (existencias_producto >= 0)
);
SELECT detalle_pedido_id, nombre_producto, detalle_pedido.precio_producto, cantidad, subtotal, estado_pedido
                FROM detalle_pedido
                INNER JOIN pedido USING(pedido_id)
                INNER JOIN producto USING(producto_id)
                WHERE cliente_id =1

CREATE TABLE pedido (
    pedido_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    cliente_id INT,
    direccion_pedido varchar(250) NOT NULL,
    estado_pedido enum('Pendiente','Finalizado','Entregado','Anulado') NOT NULL,
    fecha_registro DATE NOT NULL DEFAULT CURRENT_TIMESTAMP() CHECK (YEAR(fecha_registro) >= 2016),
    CONSTRAINT fk_cliente_pedido FOREIGN KEY (cliente_id) REFERENCES cliente(cliente_id)
);
SELECT * FROM cliente
CREATE TABLE valoracion (
    valoracion_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    producto_id INT,
    cliente_id INT,
    calificacion DECIMAL(2, 1) CHECK (calificacion <= 5.0) NOT NULL,
    comentario TEXT,
    fecha_valoracion DATE NOT NULL,
    CONSTRAINT fk_producto_valoracion FOREIGN KEY (producto_id) REFERENCES producto(producto_id),
    CONSTRAINT fk_cliente_valoracion FOREIGN KEY (cliente_id) REFERENCES cliente(cliente_id)
);
                
CREATE TABLE detalle_pedido (
    detalle_pedido_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    pedido_id INT,
    producto_id INT,
    cantidad INT NOT NULL CHECK (cantidad >= 0),
    precio_producto DECIMAL(5, 2) NOT NULL CHECK (precio_producto >= 0),
    subtotal DECIMAL(10, 2) AS (cantidad * precio_producto) STORED,
    CONSTRAINT fk_pedido_detalle FOREIGN KEY (pedido_id) REFERENCES pedido(pedido_id),
    CONSTRAINT fk_producto_detalle FOREIGN KEY (producto_id) REFERENCES producto(producto_id)
);  
SELECT DISTINCT dp.producto_id, producto.nombre_producto
                FROM pedido
                INNER JOIN detalle_pedido dp USING(pedido_id)
                INNER JOIN producto USING(producto_id)
                LEFT JOIN valoracion USING(producto_id)
                WHERE pedido.cliente_id = 7 AND pedido.estado_pedido = "Finalizado"


SELECT dp.producto_id, p.nombre_producto, IFNULL(v.valoracion_id, 'No valorado') AS estado_valoracion
FROM pedido ped
INNER JOIN detalle_pedido dp ON ped.pedido_id = dp.pedido_id
INNER JOIN producto p ON dp.producto_id = p.producto_id
LEFT JOIN valoracion v ON dp.producto_id = v.producto_id AND ped.cliente_id = v.cliente_id
WHERE ped.cliente_id = 7 AND ped.estado_pedido = 'Finalizado';

SELECT * FROM pedido

SELECT * FROM pedido
INSERT INTO cargo
VALUES
(1, 'Administrador'),
(2, 'Empleado');

 

/* Trigger para pasar el precio unitario del producto a los detalles de la venta */
DELIMITER //
CREATE TRIGGER set_precio_producto
BEFORE INSERT ON detalle_pedido
FOR EACH ROW
BEGIN
    DECLARE prod_precio DECIMAL(10, 2);
    DECLARE descuento_prod DECIMAL(5, 2);
    DECLARE descuento_cat DECIMAL(5, 2);
    DECLARE cat_id INT;
    
    -- Obtenemos el precio y el descuento del producto
    SELECT precio_producto, descuento_producto, categoria_id INTO prod_precio, descuento_prod, cat_id FROM producto WHERE producto_id = NEW.producto_id;
    
    -- Obtenemos el descuento de la categoría
    SELECT descuento_categoria INTO descuento_cat FROM categoria WHERE categoria_id = cat_id;
    
    -- Aplicamos los descuentos al precio del producto
    SET prod_precio = prod_precio * (1 - descuento_prod/100) * (1 - descuento_cat/100);
    
    -- Establecemos el precio unitario del detalle de venta al precio del producto con los descuentos aplicados
    SET NEW.precio_producto = prod_precio;
END;
//
DELIMITER ;

/*Trigger 2*/
DELIMITER //

CREATE TRIGGER lowercase_correo
BEFORE INSERT ON empleado
FOR EACH ROW
BEGIN
    SET NEW.correo_empleado = LOWER(NEW.correo_empleado);
END;
//

DELIMITER ;

/*Trigger 3*/
DELIMITER //
CREATE TRIGGER validar_edad
BEFORE INSERT ON cliente
FOR EACH ROW
BEGIN
    IF TIMESTAMPDIFF(YEAR, NEW.nacimiento_cliente, CURDATE()) < 18 OR YEAR(NEW.nacimiento_cliente) < 1950 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El cliente debe tener al menos 18 años y no puede nacer antes de 1950.';
    END IF;
END;
//
DELIMITER ;

/*Trigger 4*/
DELIMITER //
CREATE TRIGGER validar_existencias
BEFORE INSERT ON detalle_pedido
FOR EACH ROW
BEGIN
    DECLARE existencias INT;
    
    -- Obtener las existencias del producto
    SELECT existencias_producto INTO existencias FROM producto WHERE producto_id = NEW.producto_id;
    
    -- Validar que la cantidad a insertar no sobrepase las existencias
    IF NEW.cantidad > existencias THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No se puede agregar más productos al pedido debido a que sobrepasa la cantidad de existencias del producto.';
    END IF;
END;
//
DELIMITER ;

/* Trigger 5 */
/*Actualizar la cantidad de existencias en productos */
DELIMITER //
CREATE TRIGGER actualizar_existencias
AFTER UPDATE ON pedido
FOR EACH ROW
BEGIN
    DECLARE cantidad_pedido INT;
    DECLARE producto_id_pedido INT;

    IF NEW.estado_pedido = 'Entregado' AND OLD.estado_pedido != 'Entregado' THEN
    
        SELECT producto_id, cantidad INTO producto_id_pedido, cantidad_pedido FROM detalle_pedido WHERE pedido_id = NEW.pedido_id;
      
        UPDATE producto SET existencias_producto = existencias_producto - cantidad_pedido WHERE producto_id = producto_id_pedido;
    END IF;
END;
//
DELIMITER ;


/*Saber si el cliente ha comprado un producto para valorarlo*/

 SELECT cl.nombre_cliente, cl.apellido_cliente, pr.nombre_producto, pe.pedido_id
FROM cliente cl
JOIN pedido pe ON cl.cliente_id = pe.cliente_id
JOIN detalle_pedido dp ON pe.pedido_id = dp.pedido_id
JOIN producto pr ON dp.producto_id = pr.producto_id
WHERE cl.cliente_id = 1


