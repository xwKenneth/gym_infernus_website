DROP DATABASE IF EXISTS gyminfernus_db;
CREATE DATABASE gyminfernus_db;
USE gyminfernus_db;
CREATE TABLE cargo (
    cargo_id INT PRIMARY KEY,
    cargo VARCHAR(100) NOT NULL
);


CREATE TABLE empleado (
    empleado_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100) NOT NULL,
    correo_electronico VARCHAR(100) UNIQUE NOT NULL,
    contrasena VARCHAR(255) NOT NULL,
    cargo_id INT,
    CONSTRAINT fk_cargo_empleado FOREIGN KEY (cargo_id) REFERENCES cargo(cargo_id)
);


CREATE TABLE cliente (
    cliente_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100) NOT NULL,
    telefono VARCHAR(15) NOT NULL,
    dui VARCHAR(10) UNIQUE NOT NULL,
    fecha_nacimiento DATE NOT NULL,
    correo_electronico VARCHAR(100) UNIQUE NOT NULL,
    direccion VARCHAR(255) NOT NULL,
    contrasena VARCHAR(255) NOT NULL
);
 
CREATE TABLE proveedor (
    proveedor_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    telefono VARCHAR(15) NOT NULL,
    direccion VARCHAR(255) NOT NULL
);
 

CREATE TABLE marcas (
    marca_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    foto VARCHAR(255) NOT NULL
);

CREATE TABLE categoria (
    categoria_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    foto VARCHAR(255) NOT NULL
);

CREATE TABLE producto (
    producto_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    descripcion TEXT,
    precio DECIMAL(10, 2) NOT NULL,
    foto VARCHAR(255) NOT NULL,
    proveedor_id INT,
    marca_id INT,
    categoria_id INT,
    existencias INT NOT NULL,
    estado tinyint(1),
    CONSTRAINT fk_proveedor_producto FOREIGN KEY (proveedor_id) REFERENCES proveedor(proveedor_id),
    CONSTRAINT fk_marca_producto FOREIGN KEY (marca_id) REFERENCES marcas(marca_id),
    CONSTRAINT fk_categoria_producto FOREIGN KEY (categoria_id) REFERENCES categoria(categoria_id),
    CONSTRAINT chk_precio_positive CHECK (precio >= 0),
    CONSTRAINT chk_existencias_positive CHECK (existencias >= 0)
);
 
CREATE TABLE ventas (
    venta_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    fecha DATE NOT NULL DEFAULT CURRENT_TIMESTAMP() CHECK (YEAR(fecha) >= 2016) ,
    total DECIMAL(10, 2) NOT NULL,
    cliente_id INT,
    CONSTRAINT fk_cliente_ventas FOREIGN KEY (cliente_id) REFERENCES cliente(cliente_id)
);
 
CREATE TABLE valoracion (
    valoracion_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    producto_id INT,
    cliente_id INT,
    calificacion DECIMAL(3, 1) NOT NULL,
    comentario TEXT,
    fecha_valoracion DATE NOT NULL,
    CONSTRAINT fk_producto_valoracion FOREIGN KEY (producto_id) REFERENCES producto(producto_id),
    CONSTRAINT fk_cliente_valoracion FOREIGN KEY (cliente_id) REFERENCES cliente(cliente_id)
);

SELECT * FROM ventas
CREATE TABLE detalle_ventas (
    detalle_venta_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    venta_id INT,
    producto_id INT,
    cantidad INT NOT NULL CHECK (cantidad >= 0),
    precio_unitario DECIMAL(10, 2) NOT NULL CHECK (precio_unitario >= 0),
    subtotal DECIMAL(10, 2) AS (cantidad * precio_unitario) STORED,
    descuento DECIMAL(5, 2) DEFAULT 0 CHECK (descuento >= 0 AND descuento <= 100),
    direccion_cliente varchar(250) NOT NULL,
    CONSTRAINT fk_ventas_detalle FOREIGN KEY (venta_id) REFERENCES ventas(venta_id),
    CONSTRAINT fk_producto_detalle FOREIGN KEY (producto_id) REFERENCES producto(producto_id)
);

 
SHOW COLUMNS FROM detalle_ventas  

 
-- Insertar un registro en la tabla detalle_ventas
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, direccion_cliente)
VALUES (5, 4, 3, '123 Calle Principal');


SELECT 
    TRIGGER_NAME, 
    EVENT_MANIPULATION, 
    EVENT_OBJECT_TABLE, 
    ACTION_STATEMENT, 
    ACTION_TIMING 
FROM 
    information_schema.TRIGGERS
WHERE 
    TRIGGER_SCHEMA = 'gyminfernus_db' AND
    TRIGGER_NAME = 'set_precio_unitario';


INSERT INTO cargo
VALUES
(1, 'Administrador'),
(2, 'Empleado');

DELIMITER //
CREATE TRIGGER set_precio_unitario
BEFORE INSERT ON detalle_ventas
FOR EACH ROW
BEGIN
    DECLARE prod_precio DECIMAL(10, 2);
    -- Obtenemos el precio del producto
    SELECT precio INTO prod_precio FROM producto WHERE producto_id = NEW.producto_id;
    -- Establecemos el precio unitario del detalle de venta al precio del producto
    SET NEW.precio_unitario = prod_precio;
END;
//
DELIMITER ;


/*Trigger 2*/
DELIMITER //

CREATE TRIGGER lowercase_correo
BEFORE INSERT ON empleado
FOR EACH ROW
BEGIN
    SET NEW.correo_electronico = LOWER(NEW.correo_electronico);
END;
//

DELIMITER ;


